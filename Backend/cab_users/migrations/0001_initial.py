# Generated by Django 4.2.18 on 2025-06-12 11:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True)),
                ('phone_number', models.CharField(max_length=10, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('driver', 'Driver'), ('customer', 'Customer'), ('vendor', 'Vendor')], default='vendor', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=100)),
                ('customer_number', models.CharField(max_length=15)),
                ('customer_email', models.EmailField(blank=True, max_length=100, null=True)),
                ('pickup_location', models.CharField(max_length=255)),
                ('drop_location', models.CharField(max_length=255)),
                ('trip_type', models.CharField(choices=[('one_way', 'one_way'), ('round_trip', 'round_trip')], max_length=20)),
                ('special_requirements', models.CharField(default='', max_length=200)),
                ('vehicle_type', models.CharField(default='', max_length=200)),
                ('pickup_date', models.DateTimeField(default=None)),
                ('drop_date', models.DateTimeField(blank=True, null=True)),
                ('trip_km', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('buy_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(default='not_started', max_length=20)),
                ('bidding_status', models.CharField(default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('isAdmin', models.BooleanField()),
                ('carrier', models.BooleanField()),
                ('driver_allowance', models.BooleanField()),
                ('tax_included', models.BooleanField()),
                ('toll_included', models.BooleanField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('discount_percentage', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('max_discount_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('usage_limit', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='VendorRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(default=None, max_length=100)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('company_name', models.CharField(max_length=100)),
                ('pan_number', models.CharField(max_length=10)),
                ('gst_number', models.CharField(max_length=15)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=100)),
                ('pan_number', models.CharField(max_length=10)),
                ('gst_number', models.CharField(max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('balance', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_type', models.CharField(choices=[('credit', 'credit'), ('debit', 'debit')], max_length=20)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cab_users.booking')),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cab_users.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aadhaar_number', models.CharField(max_length=20, null=True, unique=True)),
                ('license_number', models.CharField(max_length=20, null=True, unique=True)),
                ('city', models.CharField(default='', max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('aadhaar_doc', models.FileField(null=True, upload_to='aadhaar_docs/')),
                ('license_doc', models.FileField(null=True, upload_to='license_docs/')),
                ('is_available', models.BooleanField(default=True)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('total_score', models.PositiveIntegerField(default=0)),
                ('total_trip', models.PositiveIntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ImageField(null=True, upload_to='driver_photo/')),
                ('user', models.OneToOneField(limit_choices_to={'role': 'driver'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendor', to='cab_users.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Cab',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cab_number', models.CharField(max_length=20, unique=True)),
                ('cab_name', models.CharField(default='', max_length=20)),
                ('cab_type', models.CharField(choices=[('SUV', 'SUV'), ('SEDAN', 'SEDAN')], max_length=20)),
                ('price_per_km', models.IntegerField(default=0)),
                ('is_available', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('one_year_from', models.DateTimeField(null=True)),
                ('one_year_to', models.DateTimeField(null=True)),
                ('five_year_from', models.DateTimeField(null=True)),
                ('five_year_to', models.DateTimeField(null=True)),
                ('fitness_year_from', models.DateTimeField(null=True)),
                ('fitness_year_to', models.DateTimeField(null=True)),
                ('insurance_year_from', models.DateTimeField(null=True)),
                ('insurance_year_to', models.DateTimeField(null=True)),
                ('pollutions_year_from', models.DateTimeField(null=True)),
                ('pollutions_year_to', models.DateTimeField(null=True)),
                ('fule', models.CharField(max_length=20)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cab', to='cab_users.vendor')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='driver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cab_users.driver'),
        ),
        migrations.AddField(
            model_name='booking',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_vendor', to='cab_users.vendor'),
        ),
        migrations.CreateModel(
            name='Bidding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bids', to='cab_users.booking')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cab_users.driver')),
            ],
        ),
        migrations.CreateModel(
            name='DriverRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_booking', to='cab_users.booking')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='cab_users.driver')),
            ],
            options={
                'unique_together': {('driver', 'customer', 'booking')},
            },
        ),
        migrations.CreateModel(
            name='CouponUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cab_users.coupon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'coupon')},
            },
        ),
    ]
